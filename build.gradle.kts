plugins {
    `java-library`
    eclipse
    idea
    `maven-publish`
    id("net.minecraftforge.gradle") version "6.0.22"
    id("org.parchmentmc.librarian.forgegradle") version "1.+"
}

version = project.properties["mod_version"]!!
group = project.properties["mod_group_id"]!!
val mod_id: String by project
val mod_name: String by project
val mod_description: String by project
val mod_license: String by project
val imgui_version: String by project
val minecraft_version: String by project
val forge_loader_version_range: String by project
val minecraft_version_range: String by project
val forge_version_range: String by project
val parchment_version: String by project
val forge_version: String by project
val mod_authors: String by project
val pack_format_number: String by project
val mapping_channel: String by project

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion.set(JavaLanguageVersion.of(17))

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
minecraft {
    mappings(mapping_channel, "$parchment_version-$minecraft_version")

    runs {
        // applies to all the run configs below
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property("forge.logging.markers", "REGISTRIES")

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property("forge.logging.console.level", "debug")
        }

        create("client") {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property("forge.enabledGameTestNamespaces", mod_id)
        }

        create("server") {
            property("forge.enabledGameTestNamespaces", mod_id)
            args("--nogui")
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        create("gameTestServer") {
            property("forge.enabledGameTestNamespaces", mod_id)
        }

        create("data") {
            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args(
                "--mod", mod_id,
                "--all",
                "--output", file("src/generated/resources/").absolutePath,
                "--existing", file("src/main/resources/").absolutePath
            )
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.configure {
    resources.srcDirs("src/generated/resources/")
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}")

    implementation("com.builtbroken.aiimprovements:AI-Improvements")
    implementation("de.srendi.advancedperipherals:AdvancedPeripherals")
    /*
    implementation(":AppleSkin")
    implementation(":Bakery")
    implementation(":Balm")
    implementation(":Better-Burning")
    implementation(":BetterAdvancements")
    implementation(":Big-Brain")
    implementation(":BoatItemView")
    implementation(":CC-Tweaked")
    implementation(":Candlelight")
    implementation(":Catalogue")
    implementation(":Clumps")
    implementation(":Controlling")
    implementation(":CrashUtilities")
    implementation(":Create")
    implementation(":CreateEnchantmentIndustry")
    implementation(":CreateInteriorsMod")
    implementation(":Curios")
    implementation(":Ding")
    implementation(":DoAPI")
    implementation(":DurabilityTooltip")
    implementation(":DynamicLightsReforged")
    implementation(":EmbeddiumPlus")
    implementation(":Enchantment-Descriptions")
    implementation(":FarmersDelight")
    implementation(":FastPaintings")
    implementation(":Fastload")
    implementation(":FerriteCore")
    implementation(":Fusion")
    implementation(":GameMenuModOption")
    implementation(":GetItTogetherDrops")
    implementation(":ImmediatelyFast")
    implementation(":InfinityButtons")
    implementation(":JustEnoughBreeding")
    implementation(":JustEnoughItems")
    implementation(":KotlinForForge")
    implementation(":KryptonReforged")
    implementation(":Meadow")
    implementation(":MemoryLeakFix")
    implementation(":ModernFix")
    implementation(":MouseTweaks")
    implementation(":NetherPortalFix")
    implementation(":Oceans_Delight")
    implementation(":Oculus")
    implementation(":Patchouli")
    implementation(":Piglin-Proliferation")
    implementation(":Railway")
    implementation(":Rechiseled")
    implementation(":RechiseledCreate")
    implementation(":SmarterFarmers")
    implementation(":SuggestionProviderFix")
    implementation(":TerraBlender")
    implementation(":WoodGood")
    implementation(":alternate-current")
    implementation(":betteranimationscollection/betteranimationscollection")
    implementation(":blockrunner/blockrunner")
    implementation(":cccbridge")
    implementation(":cloth-config")
    implementation(":cutthrough")
    implementation(":easyanvils/easyanvils")
    implementation(":easymagic/easymagic")
    implementation(":effectdescriptions")
    implementation(":embeddium")
    implementation(":leavesbegone")
    implementation(":mapatlases-neoforge")
    implementation(":morered")
    implementation(":pickupnotifier/pickupnotifier")
    implementation(":radium-upstream")
    implementation(":right-click-harvest")
    implementation(":rrls")
    implementation(":rubidium-extra")
    implementation(":searchables")
    implementation(":spark")
    implementation(":spyglass-improvements")
    implementation(":textrues-embeddium-options")
    implementation(":toofast")
    implementation(":visualworkbench/visualworkbench")*/

    // Example mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
    // runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

eclipse {
    // Run everytime eclipse builds the code
    //autoBuildTasks genEclipseRuns
    // Run when importing the project
    synchronizationTasks("genEclipseRuns")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks {
    @Suppress("UnstableApiUsage")
    withType<ProcessResources>().configureEach {
        val replacements = mutableMapOf(
            "minecraft_version" to minecraft_version,
            "forge_loader_version_range" to forge_loader_version_range,
            "forge_version_range" to forge_version_range,
            "minecraft_version_range" to minecraft_version_range,
            "forge_version" to forge_version,
            "mod_id" to mod_id,
            "mod_name" to mod_name,
            "mod_license" to mod_license,
            "mod_version" to version as String,
            "mod_authors" to mod_authors,
            "mod_description" to mod_description,
            "pack_format_number" to pack_format_number
        )
        inputs.properties(replacements)

        filesMatching(listOf("META-INF/mods.toml", "pack.mcmeta")) {
            expand(replacements + ("project" to project))
        }
    }

    withType<JavaCompile>().configureEach {
        options.encoding = "UTF-8"
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        isDownloadJavadoc = true
        isDownloadSources = true
    }
}
